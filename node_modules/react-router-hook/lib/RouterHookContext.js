'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _eventemitter = require('eventemitter3');

var _eventemitter2 = _interopRequireDefault(_eventemitter);

var _constants = require('./constants');

var _getAllComponents = require('./getAllComponents');

var _getAllComponents2 = _interopRequireDefault(_getAllComponents);

var _PropTypes = require('./PropTypes');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var CHANGE_LOADING_STATE = 'changeLoadingState';
var canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);
var noop = function noop() {
  return null;
};

var RouterHookContext = function (_React$Component) {
  (0, _inherits3.default)(RouterHookContext, _React$Component);

  function RouterHookContext(props) {
    (0, _classCallCheck3.default)(this, RouterHookContext);

    var _this = (0, _possibleConstructorReturn3.default)(this, (RouterHookContext.__proto__ || (0, _getPrototypeOf2.default)(RouterHookContext)).call(this, props));

    _this.componentStatuses = {};
    _this.setComponentStatus = _this.setComponentStatus.bind(_this);
    _this.getComponentStatus = _this.getComponentStatus.bind(_this);
    _this.addLoadingListener = _this.addLoadingListener.bind(_this);
    _this.updateRouterLoading = _this.updateRouterLoading.bind(_this);
    _this.loading = false;
    return _this;
  }

  (0, _createClass3.default)(RouterHookContext, [{
    key: 'getChildContext',
    value: function getChildContext() {
      return {
        routerHookContext: {
          getComponentStatus: this.getComponentStatus,
          setComponentStatus: this.setComponentStatus,
          addLoadingListener: this.addLoadingListener
        }
      };
    }
  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {
      this.props.onStarted();
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      if (nextProps.location === this.props.location) {
        return;
      }
      this.componentStatuses = {};
      if (this.loading) {
        this.props.onAborted();
      }
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      if (this.routerEventEmitter) {
        this.routerEventEmitter.removeAllListeners(CHANGE_LOADING_STATE);
        this.routerEventEmitter = null;
      }
    }
  }, {
    key: 'setComponentStatus',
    value: function setComponentStatus(Component, status, err) {
      var routerHooks = Component[_constants.routerHookPropName];
      if (!routerHooks) {
        return;
      }
      this.componentStatuses[routerHooks.id] = status;
      if (err) {
        this.props.onError({ Component: Component, error: err });
        this.componentStatuses[routerHooks.id] = _constants.ComponentStatus.DONE;
      }
      this.updateRouterLoading();
    }
  }, {
    key: 'getComponentStatus',
    value: function getComponentStatus(Component) {
      var routerHooks = Component[_constants.routerHookPropName];
      if (!routerHooks) {
        return null;
      }
      return this.componentStatuses[routerHooks.id];
    }
  }, {
    key: 'addLoadingListener',
    value: function addLoadingListener(listener) {
      var _this2 = this;

      if (!canUseDOM) {
        return noop;
      }
      if (!this.routerEventEmitter) {
        this.routerEventEmitter = new _eventemitter2.default();
      }
      this.routerEventEmitter.on(CHANGE_LOADING_STATE, listener);
      return function () {
        _this2.routerEventEmitter.removeListener(CHANGE_LOADING_STATE, listener);
      };
    }
  }, {
    key: 'updateRouterLoading',
    value: function updateRouterLoading() {
      if (!canUseDOM) {
        return;
      }
      var components = (0, _getAllComponents2.default)(this.props.components);
      var total = 0;
      var init = 0;
      var defer = 0;
      var done = 0;
      for (var i = 0, len = components.length; i < len; i += 1) {
        var hookId = components[i][_constants.routerHookPropName].id;
        var status = this.componentStatuses[hookId];
        if (status) {
          total += 1;
          switch (status) {
            case _constants.ComponentStatus.INIT:
              init += 1;
              break;
            case _constants.ComponentStatus.DEFER:
              defer += 1;
              break;
            case _constants.ComponentStatus.DONE:
              done += 1;
              break;
            default:
              throw new Error('Unknown status ' + status);
          }
        }
      }

      var loading = done < total;
      if (this.routerEventEmitter) {
        this.routerEventEmitter.emit(CHANGE_LOADING_STATE, loading, {
          total: total,
          init: init,
          defer: defer,
          done: done
        });
      }
      if (this.loading !== loading) {
        this.loading = loading;
        if (!loading) {
          this.props.onCompleted();
        } else {
          this.props.onStarted();
        }
      }
    }
  }, {
    key: 'render',
    value: function render() {
      return this.props.children;
    }
  }]);
  return RouterHookContext;
}(_react2.default.Component);

RouterHookContext.propTypes = {
  children: _propTypes2.default.node.isRequired,
  components: _propTypes2.default.arrayOf(_PropTypes.componentsShape).isRequired,
  location: _PropTypes.locationShape.isRequired,
  onAborted: _propTypes2.default.func.isRequired,
  onCompleted: _propTypes2.default.func.isRequired,
  onError: _propTypes2.default.func.isRequired,
  onStarted: _propTypes2.default.func.isRequired
};
RouterHookContext.childContextTypes = {
  routerHookContext: _PropTypes.routerHookContextShape
};
exports.default = RouterHookContext;