'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _objectWithoutProperties2 = require('babel-runtime/helpers/objectWithoutProperties');

var _objectWithoutProperties3 = _interopRequireDefault(_objectWithoutProperties2);

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _constants = require('./constants');

var _getInitStatus = require('./getInitStatus');

var _getInitStatus2 = _interopRequireDefault(_getInitStatus);

var _PropTypes = require('./PropTypes');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var ABORT = 'abort';

var RouterHookContainer = function (_React$Component) {
  (0, _inherits3.default)(RouterHookContainer, _React$Component);

  function RouterHookContainer(props, context) {
    (0, _classCallCheck3.default)(this, RouterHookContainer);

    var _this = (0, _possibleConstructorReturn3.default)(this, (RouterHookContainer.__proto__ || (0, _getPrototypeOf2.default)(RouterHookContainer)).call(this, props, context));

    _this.setStatus = _this.setStatus.bind(_this);
    _this.reloadComponent = _this.reloadComponent.bind(_this);

    _this.mounted = false;
    _this.state = {
      status: (0, _getInitStatus2.default)(props.children.type, _this.props.routerWillEnterHooks)
    };
    return _this;
  }

  (0, _createClass3.default)(RouterHookContainer, [{
    key: 'componentWillMount',
    value: function componentWillMount() {
      this.context.routerHookContext.setComponentStatus(this.Component, (0, _getInitStatus2.default)(this.Component, this.props.routerWillEnterHooks));
    }
  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {
      this.mounted = true;
      this.reloadComponent(true);
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      if (this.props.renderProps.location !== nextProps.renderProps.location) {
        this.context.routerHookContext.setComponentStatus(this.Component, (0, _getInitStatus2.default)(this.Component, this.props.routerWillEnterHooks));
        this.setState({
          status: (0, _getInitStatus2.default)(this.Component, this.props.routerWillEnterHooks)
        });
      }
    }
  }, {
    key: 'componentDidUpdate',
    value: function componentDidUpdate(prevProps) {
      if (this.props.renderProps.location !== prevProps.renderProps.location) {
        this.reloadComponent(true);
      }
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      this.mounted = false;
    }
  }, {
    key: 'setStatus',
    value: function setStatus(status, shouldReport, err) {
      if (this.state.status === status || !this.mounted) {
        return;
      }
      this.setState({ status: status });
      if (shouldReport) {
        this.context.routerHookContext.setComponentStatus(this.Component, status, err);
      }
    }
  }, {
    key: 'reloadComponent',
    value: function reloadComponent() {
      var _this2 = this;

      var shouldReportStatus = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

      if (!this.mounted) {
        return _promise2.default.resolve();
      }
      var routerHooks = this.Component[_constants.routerHookPropName];
      if (!routerHooks) {
        return _promise2.default.resolve();
      }
      var _props = this.props,
          locals = _props.locals,
          renderProps = _props.renderProps,
          routerDidEnterHooks = _props.routerDidEnterHooks,
          routerWillEnterHooks = _props.routerWillEnterHooks;


      var initStatus = (0, _getInitStatus2.default)(this.Component, routerWillEnterHooks);

      var location = renderProps.location;

      var args = (0, _extends3.default)({}, renderProps, locals);

      return _promise2.default.resolve().then(function () {
        var willEnterHooks = routerWillEnterHooks.map(function (key) {
          return routerHooks[key];
        }).filter(function (f) {
          return f;
        });
        if (willEnterHooks.length < 1) {
          return null;
        }
        _this2.setStatus(initStatus, shouldReportStatus);
        return willEnterHooks.reduce(function (total, hook) {
          return total.then(function () {
            if (location !== renderProps.location || !_this2.mounted) {
              return _promise2.default.reject(ABORT);
            }
            return hook(args);
          });
        }, _promise2.default.resolve());
      }).then(function () {
        if (location !== renderProps.location || !_this2.mounted) {
          return _promise2.default.reject(ABORT);
        }
        var didEnterHooks = routerDidEnterHooks.map(function (key) {
          return routerHooks[key];
        }).filter(function (f) {
          return f;
        });
        if (didEnterHooks.length < 1) {
          return null;
        }
        if (_this2.state.status !== _constants.ComponentStatus.DEFER) {
          _this2.setStatus(_constants.ComponentStatus.DEFER, shouldReportStatus);
        }
        return didEnterHooks.reduce(function (total, hook) {
          return total.then(function () {
            if (location !== renderProps.location || !_this2.mounted) {
              return _promise2.default.reject(ABORT);
            }
            return hook(args);
          });
        }, _promise2.default.resolve());
      }).then(function () {
        if (location !== renderProps.location || !_this2.mounted) {
          return _promise2.default.reject(ABORT);
        }
        if (_this2.state.status !== _constants.ComponentStatus.DONE) {
          _this2.setStatus(_constants.ComponentStatus.DONE, shouldReportStatus);
        }
        return null;
      }).catch(function (err) {
        if (err === ABORT) {
          return;
        }
        _this2.setStatus(_constants.ComponentStatus.DONE, shouldReportStatus, err);
      });
    }
  }, {
    key: 'render',
    value: function render() {
      var _props2 = this.props,
          children = _props2.children,
          locals = _props2.locals,
          renderProps = _props2.renderProps,
          routerDidEnterHooks = _props2.routerDidEnterHooks,
          routerWillEnterHooks = _props2.routerWillEnterHooks,
          restProps = (0, _objectWithoutProperties3.default)(_props2, ['children', 'locals', 'renderProps', 'routerDidEnterHooks', 'routerWillEnterHooks']);

      var passProps = (0, _extends3.default)({}, restProps, {
        componentStatus: this.state.status,
        reloadComponent: this.reloadComponent
      });

      if (this.state.status === _constants.ComponentStatus.INIT) {
        if (!this.prevChildren) {
          return null;
        }
        return _react2.default.cloneElement(this.prevChildren, passProps);
      }

      this.prevChildren = _react2.default.cloneElement(children, passProps);
      return this.prevChildren;
    }
  }, {
    key: 'Component',
    get: function get() {
      return this.props.children.type;
    }
  }]);
  return RouterHookContainer;
}(_react2.default.Component);

RouterHookContainer.propTypes = {
  children: _propTypes2.default.node.isRequired,
  locals: _propTypes2.default.object.isRequired,
  renderProps: _PropTypes.renderPropsShape.isRequired,
  routerDidEnterHooks: _propTypes2.default.arrayOf(_propTypes2.default.string).isRequired,
  routerWillEnterHooks: _propTypes2.default.arrayOf(_propTypes2.default.string).isRequired
};
RouterHookContainer.contextTypes = {
  routerHookContext: _PropTypes.routerHookContextShape
};
exports.default = RouterHookContainer;